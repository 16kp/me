{"version":3,"sources":["components/Body.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Body","className","Grid","container","spacing","item","xs","direction","href","target","class","Header","Footer","theme","createMuiTheme","typography","fontFamily","join","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAmFeA,MAxEf,WAEI,OACI,yBAAKC,UAAU,YACX,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAGrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IAEf,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,kBAACJ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGG,UAAU,UAClC,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,0BAAML,UAAU,eAAhB,eAIJ,kBAACC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIL,UAAU,UAE7B,kBAACC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,0BAAML,UAAU,cAAhB,oFAEI,6BAFJ,iIAKI,6BACA,6BACA,6BACA,6BACA,6BACA,uBAAGO,KAAK,4FAA4FC,OAAO,SAASC,MAAM,QAA1H,0CAVJ,gDAeJ,kBAACR,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIL,UAAU,cAA7B,mGAEI,4BACI,8FAGA,mLAShB,kBAACC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IAEf,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,uBAAGE,KAAK,sDAAsDC,OAAO,UACjE,kBAAC,IAAD,CAAUR,UAAU,yBAExB,uBAAGO,KAAK,sCAAsCC,OAAO,UACjD,kBAAC,IAAD,CAAaR,UAAU,yBAE3B,uBAAGO,KAAK,+CAA+CC,OAAO,UAC1D,kBAAC,IAAD,CAAcR,UAAU,yBAE5B,uBAAGO,KAAK,0BAA0BC,OAAO,UACrC,kBAAC,IAAD,CAAYR,UAAU,6BC9D/BU,MARf,WACI,OACI,yBAAKV,UAAU,gBCMRW,MARf,WACI,OACI,yBAAKX,UAAU,gB,gBCCjBY,EAAQC,YAAe,CAC3BC,WAAY,CACVC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,QAgBIC,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAeN,MAAOA,GACpB,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCjBYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28fda444.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/styles.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nfunction Body() {\r\n\r\n    return (\r\n        <div className=\"App-body\">\r\n            <Grid container spacing={4}>\r\n                \r\n                {/* empty space of 1 column on the left */}\r\n                <Grid item xs={1}></Grid>\r\n\r\n                <Grid item xs={5}>\r\n                    <Grid container spacing={4} direction=\"column\">\r\n                        <Grid item xs={8}>\r\n                            <span className=\"hello white\">hey there!</span>\r\n                        </Grid>\r\n\r\n                        {/* space between header and description */}\r\n                        <Grid item xs={12} className=\"empty\"></Grid>\r\n                        \r\n                        <Grid item xs={12}>\r\n                            <span className=\"text white\">\r\n                                Hello, I'm Krishna, I live in Hyderabad, India, and I work at Amazon (no longer).\r\n                                <br/>\r\n                                \r\n                                In my free time I do lots of things, including reading books, playing games to mindlessly wandering off on Google Earth, since\r\n                                <br/>\r\n                                <br/>\r\n                                <br/>\r\n                                <br/>\r\n                                <br/> \r\n                                <a href=\"https://clip.cafe/harry-potter-the-half-blood-prince-2009/these-are-mad-times-live-in-s1/\" target=\"_blank\" class=\"link\">\"these are mad times we live in, MAD!\"</a>\r\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~sluggy\r\n                                \r\n                            </span>\r\n                        </Grid>\r\n                        <Grid item xs={12} className=\"text white\">\r\n                            so apparently adding google fonts in react is pretty easy, but i need to re-organise this stuff.\r\n                            <ul>\r\n                                <li>\r\n                                    [❌] also need to make this responsive and mobile friendly\r\n                                </li>\r\n                                <li>\r\n                                    [❌] make it more blog friendly, prolly figure out a way to convert md to react/HTML and add css classes wherever applicable, but maybe not\r\n                                </li>\r\n                            </ul>\r\n                        </Grid>\r\n                    </Grid>                \r\n                </Grid>\r\n\r\n                {/* empty space of 4 columns */}\r\n                <Grid item xs={4}></Grid>\r\n                \r\n                <Grid item xs={2}>\r\n                    <a href=\"mailto:purohitkrishnar@gmail.com?subject=Hey There!\" target=\"_blank\">\r\n                        <MailIcon className=\"white social-button\"></MailIcon>\r\n                    </a>\r\n                    <a href=\"https://twitter.com/purohitkrishnar\" target=\"_blank\">\r\n                        <TwitterIcon className=\"white social-button\"></TwitterIcon>\r\n                    </a>\r\n                    <a href=\"https://www.linkedin.com/in/purohitkrishnar/\" target=\"_blank\">\r\n                        <LinkedInIcon className=\"white social-button\"></LinkedInIcon>\r\n                    </a>\r\n                    <a href=\"https://github.com/16kp\" target=\"_blank\">\r\n                        <GitHubIcon className=\"white social-button\"></GitHubIcon>\r\n                    </a>\r\n                    \r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Body;\r\n\r\n","import React from 'react';\r\nimport '../css/styles.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"App-header\">\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../css/styles.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"App-footer\">\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Body from './components/Body';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n  },\r\n});\r\n\r\nfunction App() {  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Body />\r\n        <Footer />\r\n      </div>\r\n    </ThemeProvider>  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}